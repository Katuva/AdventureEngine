// <auto-generated />
using System;
using AdventureEngine.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdventureEngine.Migrations
{
    [DbContext(typeof(AdventureDbContext))]
    [Migration("20251018193827_UpdateVocabularyUniqueConstraint")]
    partial class UpdateVocabularyUniqueConstraint
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("AdventureEngine.Models.CompletedAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("GameSaveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomActionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameSaveId");

                    b.HasIndex("RoomActionId");

                    b.ToTable("CompletedActions");
                });

            modelBuilder.Entity("AdventureEngine.Models.CompletedExaminableInteraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExaminableObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameSaveId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExaminableObjectId");

                    b.HasIndex("GameSaveId");

                    b.ToTable("CompletedExaminableInteractions");
                });

            modelBuilder.Entity("AdventureEngine.Models.ExaminableObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FailureMessage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Keywords")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RequiredItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RevealedByActionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SuccessMessage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UnlocksRoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RequiredItemId");

                    b.HasIndex("RevealedByActionId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UnlocksRoomId");

                    b.ToTable("ExaminableObjects");
                });

            modelBuilder.Entity("AdventureEngine.Models.GameSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPlayerDead")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SlotName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TurnCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrentRoomId");

                    b.HasIndex("SlotName")
                        .IsUnique();

                    b.ToTable("GameSaves");
                });

            modelBuilder.Entity("AdventureEngine.Models.InventoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameSaveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PickedUpAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameSaveId");

                    b.HasIndex("ItemId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("AdventureEngine.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCollectable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsQuestItem")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UseMessage")
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("AdventureEngine.Models.ItemAdjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adjective")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemId", "Adjective")
                        .IsUnique();

                    b.ToTable("ItemAdjectives");
                });

            modelBuilder.Entity("AdventureEngine.Models.PlacedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameSaveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PlacedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameSaveId");

                    b.HasIndex("ItemId");

                    b.HasIndex("RoomId");

                    b.ToTable("PlacedItems");
                });

            modelBuilder.Entity("AdventureEngine.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DamageAmount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeathMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DownRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EastRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeadlyRoom")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStartingRoom")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWinningRoom")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("NorthRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SouthRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WestRoomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WinMessage")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DownRoomId");

                    b.HasIndex("EastRoomId");

                    b.HasIndex("NorthRoomId");

                    b.HasIndex("SouthRoomId");

                    b.HasIndex("UpRoomId");

                    b.HasIndex("WestRoomId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("AdventureEngine.Models.RoomAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FailureMessage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRepeatable")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RequiredItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SuccessMessage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UnlocksRoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RequiredItemId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UnlocksRoomId");

                    b.ToTable("RoomActions");
                });

            modelBuilder.Entity("AdventureEngine.Models.Vocabulary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CanonicalForm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WordType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Word", "WordType")
                        .IsUnique();

                    b.ToTable("Vocabularies");
                });

            modelBuilder.Entity("AdventureEngine.Models.CompletedAction", b =>
                {
                    b.HasOne("AdventureEngine.Models.GameSave", "GameSave")
                        .WithMany("CompletedActions")
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureEngine.Models.RoomAction", "RoomAction")
                        .WithMany()
                        .HasForeignKey("RoomActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameSave");

                    b.Navigation("RoomAction");
                });

            modelBuilder.Entity("AdventureEngine.Models.CompletedExaminableInteraction", b =>
                {
                    b.HasOne("AdventureEngine.Models.ExaminableObject", "ExaminableObject")
                        .WithMany()
                        .HasForeignKey("ExaminableObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdventureEngine.Models.GameSave", "GameSave")
                        .WithMany()
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExaminableObject");

                    b.Navigation("GameSave");
                });

            modelBuilder.Entity("AdventureEngine.Models.ExaminableObject", b =>
                {
                    b.HasOne("AdventureEngine.Models.Item", "RequiredItem")
                        .WithMany()
                        .HasForeignKey("RequiredItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdventureEngine.Models.RoomAction", "RevealedByAction")
                        .WithMany()
                        .HasForeignKey("RevealedByActionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdventureEngine.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureEngine.Models.Room", "UnlocksRoom")
                        .WithMany()
                        .HasForeignKey("UnlocksRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("RequiredItem");

                    b.Navigation("RevealedByAction");

                    b.Navigation("Room");

                    b.Navigation("UnlocksRoom");
                });

            modelBuilder.Entity("AdventureEngine.Models.GameSave", b =>
                {
                    b.HasOne("AdventureEngine.Models.Room", "CurrentRoom")
                        .WithMany()
                        .HasForeignKey("CurrentRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrentRoom");
                });

            modelBuilder.Entity("AdventureEngine.Models.InventoryItem", b =>
                {
                    b.HasOne("AdventureEngine.Models.GameSave", "GameSave")
                        .WithMany("Inventory")
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureEngine.Models.Item", "Item")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameSave");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("AdventureEngine.Models.Item", b =>
                {
                    b.HasOne("AdventureEngine.Models.Room", "Room")
                        .WithMany("Items")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Room");
                });

            modelBuilder.Entity("AdventureEngine.Models.ItemAdjective", b =>
                {
                    b.HasOne("AdventureEngine.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("AdventureEngine.Models.PlacedItem", b =>
                {
                    b.HasOne("AdventureEngine.Models.GameSave", "GameSave")
                        .WithMany()
                        .HasForeignKey("GameSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureEngine.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdventureEngine.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameSave");

                    b.Navigation("Item");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("AdventureEngine.Models.Room", b =>
                {
                    b.HasOne("AdventureEngine.Models.Room", "DownRoom")
                        .WithMany()
                        .HasForeignKey("DownRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdventureEngine.Models.Room", "EastRoom")
                        .WithMany()
                        .HasForeignKey("EastRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdventureEngine.Models.Room", "NorthRoom")
                        .WithMany()
                        .HasForeignKey("NorthRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdventureEngine.Models.Room", "SouthRoom")
                        .WithMany()
                        .HasForeignKey("SouthRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdventureEngine.Models.Room", "UpRoom")
                        .WithMany()
                        .HasForeignKey("UpRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdventureEngine.Models.Room", "WestRoom")
                        .WithMany()
                        .HasForeignKey("WestRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DownRoom");

                    b.Navigation("EastRoom");

                    b.Navigation("NorthRoom");

                    b.Navigation("SouthRoom");

                    b.Navigation("UpRoom");

                    b.Navigation("WestRoom");
                });

            modelBuilder.Entity("AdventureEngine.Models.RoomAction", b =>
                {
                    b.HasOne("AdventureEngine.Models.Item", "RequiredItem")
                        .WithMany()
                        .HasForeignKey("RequiredItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdventureEngine.Models.Room", "Room")
                        .WithMany("Actions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdventureEngine.Models.Room", "UnlocksRoom")
                        .WithMany()
                        .HasForeignKey("UnlocksRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("RequiredItem");

                    b.Navigation("Room");

                    b.Navigation("UnlocksRoom");
                });

            modelBuilder.Entity("AdventureEngine.Models.GameSave", b =>
                {
                    b.Navigation("CompletedActions");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("AdventureEngine.Models.Item", b =>
                {
                    b.Navigation("InventoryItems");
                });

            modelBuilder.Entity("AdventureEngine.Models.Room", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
